{"version":3,"sources":["api/issues.ts","api/githubClient.ts","helpers/index.ts","hooks/useAutocompleteState.ts","hooks/useDebounceCallback.ts","contexts/Autocomplete.context.ts","components/AutocompleteProvider/index.tsx","hooks/useAutocomplete.ts","components/SearchInput/index.tsx","components/Suggestions/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Issues","axiosInstance","this","repoOwner","repo","requestParams","get","issues","basicResponse","response","data","axios","create","baseURL","addResponseInterceptor","callback","interceptors","use","sanitize","value","trim","toLowerCase","useAutocompleteState","React","useState","search","setSearch","loading","setLoading","error","setError","suggestions","setSuggestions","debounceSearch","dependecies","delay","useCallback","lodash","debounce","useDebounceCallback","query","length","githubClient","getRepoIssues","params","per_page","then","list","querySanitized","filter","title","labels","matchTitle","includes","matchLabel","find","label","name","calculateSuggestions","issuesFiltered","catch","finally","onSearch","event","target","AutocompleteContext","createContext","AutocompleteProvider","children","Provider","useAutocomplete","useContext","SearchInput","className","type","tabIndex","xmlnsXlink","xlinkHref","onChange","placeholder","aria-label","autoFocus","xmlns","width","height","display","id","viewBox","d","Suggestions","role","map","issue","key","href","html_url","rel","number","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.5c0f5ec5.chunk.js","sourcesContent":["// Dependencies\nimport { AxiosInstance, AxiosRequestConfig } from 'axios';\n\n// Models\nimport { IssueModel } from '../models/IssueModel';\n\nexport class Issues {\n  axiosInstance!: AxiosInstance;\n\n  /**\n   * Creates an instance of Issues resource.\n   * @param axiosInstance \n   */\n  constructor(axiosInstance: AxiosInstance) {\n    this.axiosInstance = axiosInstance;\n  }\n\n  /**\n   * Gets the issues for a given repository.\n   * @param repoOwner The owner of repository.\n   * @param repo The repository name.\n   * @param requestParams The request configuration params.\n   */\n  getRepoIssues(repoOwner: string, repo: string, requestParams?: AxiosRequestConfig): Promise<IssueModel[]> {\n    return this.axiosInstance\n      .get(`/repos/${repoOwner}/${repo}/issues`, requestParams);\n  }\n}\n\nexport default Issues;","// Depedencies\nimport axios, { AxiosInstance, AxiosResponse } from 'axios';\n\n// Resources\nimport Issues from './issues';\n\n/**\n * Github client for API connection.\n * @author Daniel Mejia\n * @class GithubClient\n */\nexport class GithubClient {\n  axiosInstance!: AxiosInstance;\n  \n  issues!: Issues;\n\n  /**\n   * Initialze the github client base on url.\n   */\n  constructor() {\n    this.axiosInstance = axios.create({ baseURL: 'https://api.github.com' });\n    this.addResponseInterceptor(this.basicResponse);\n    this.issues = new Issues(this.axiosInstance);\n    return this;\n  }\n\n  /**\n   * Add a response interceptor for client.\n   * @param { Function } callback The callback to add.\n   * @returns { object } The github client itself.\n   */\n  addResponseInterceptor(callback: (value: AxiosResponse) => AxiosResponse | Promise<AxiosResponse>) {\n    const { interceptors } = this.axiosInstance;\n    interceptors.response.use(callback);\n    return this;\n  }\n\n  /**\n   * Intercepts every response.\n   * @param { Object } response The response.\n   * @returns { object } The new response parsed.\n   */\n  basicResponse = (response: AxiosResponse) => response.data;\n}\n\nexport default new GithubClient();","// Models\nimport { IssueModel } from \"../models/IssueModel\";\n\n/**\n * Sanitize string value by cleaning white spaces and sensitve case.\n * @param { string } value The value to clean\n * @returns { string } The value cleaned.\n */\nexport function sanitize(value: string) {\n  return value\n    .trim()\n    .toLowerCase();\n}\n\n/**\n * Calcalate the suggestions based on a list of data and a given search criteria.\n * @param { Array } list The list of data.\n * @param { string } query The query to filter list.\n * @returns { Array } An array of values filtered into the list, including the highlight text.\n */\nexport function calculateSuggestions(list: IssueModel[], query: string) {\n  const querySanitized = sanitize(query);\n\n  return list\n    .filter(({ title, labels }) => {\n      const matchTitle = sanitize(title).includes(querySanitized);\n      const matchLabel = labels.find((label) => sanitize(label.name).includes(querySanitized))\n      return matchTitle || matchLabel;\n    });\n}","// Dependencies\nimport React from 'react';\n\n// Api\nimport githubClient from '../api/githubClient';\n\n// Helpers\nimport { calculateSuggestions } from '../helpers';\n\n// Models\nimport { IssueModel } from '../models/IssueModel';\n\n// Hooks\nimport { useDebounceCallback } from './useDebounceCallback';\n\n// Context\nimport { AutocompleteContext } from '../contexts/Autocomplete.context';\n\n/**\n * Custom hook to generate the typeahead state required.\n * @returns { Object } The state and actions for given manager.\n */\nexport function useAutocompleteState(): AutocompleteContext {\n  const [search, setSearch] = React.useState('');\n  const [loading, setLoading] = React.useState(false);\n  const [error, setError] = React.useState();\n  const [suggestions, setSuggestions] = React.useState<IssueModel[]>([]);\n\n  const debounceSearch = useDebounceCallback((query: string) => {\n    if (query?.length > 3) {\n      setLoading(true);\n      return githubClient.issues\n        .getRepoIssues('reactjs', 'reactjs.org', {\n          params: {\n            per_page: 100,\n          }\n        })\n        .then((issues: IssueModel[]) => calculateSuggestions(issues, query))\n        .then((issuesFiltered) => setSuggestions(issuesFiltered))\n        .catch(setError)\n        .finally(() => setLoading(false));\n    }\n\n    return setSuggestions([]);\n  }, []);\n\n  const onSearch = React.useCallback((event) => {\n    const { target: { value } } = event;\n    setSearch(value);\n    debounceSearch(value);\n  }, [debounceSearch]);\n\n  return { search, onSearch, suggestions, loading, error };\n}","// Dependencies\nimport React from 'react';\nimport lodash from 'lodash';\n\nexport type CallbackParams = (...args: any[]) => void;\n\n/**\n * A custom use callback hook to return a debounced function.\n * @param callback The callback to execute.\n * @param dependecies The dependencies to re rerun effect.\n * @param delay The debounce delay.\n * @returns The debounced callback.\n */\nexport function useDebounceCallback(\n  callback: CallbackParams,\n  dependecies: unknown[],\n  delay = 400,\n): CallbackParams & lodash.Cancelable {\n  return React.useCallback(lodash.debounce(callback, delay), dependecies);\n}","// Dependencies\nimport React, { ChangeEvent } from 'react'\n\n// Models\nimport { IssueModel } from '../models/IssueModel';\n\nexport interface AutocompleteContext {\n  search: string;\n  suggestions: IssueModel[];\n  onSearch: (event: ChangeEvent) => void;\n  loading: boolean;\n  error: unknown;\n}\n\nexport const AutocompleteContext = React.createContext({} as AutocompleteContext);","// Dependencies\nimport React from 'react';\n\n// Hooks\nimport { useAutocompleteState } from '../../hooks/useAutocompleteState';\n\n// Context\nimport { AutocompleteContext } from '../../contexts/Autocomplete.context';\n\nexport interface AutocompleteProvider {\n  children: React.ReactNode;\n}\n\nexport function AutocompleteProvider({ children }: AutocompleteProvider) {\n  const { search, onSearch, suggestions, loading, error } = useAutocompleteState();\n\n  return (\n    <AutocompleteContext.Provider value={{ search, onSearch, suggestions, loading, error }}>\n      {children}\n    </AutocompleteContext.Provider>\n  )\n}\n\nexport default AutocompleteProvider;","// Dependencies\nimport React from 'react';\n\n// Context\nimport { AutocompleteContext } from '../contexts/Autocomplete.context';\n\n/**\n * Custom hook to use the typehead context around the app.\n * @returns { Object } The state and actions for given provider.\n */\nexport function useAutocomplete(): AutocompleteContext {\n  return React.useContext(AutocompleteContext)\n}\n","// Dependencies\nimport React from 'react';\n\n// Hooks\nimport { useAutocomplete } from '../../hooks/useAutocomplete';\n\n// Styles\nimport './styles.css'\n\nexport function SearchInput() {\n  const { search, onSearch, loading } = useAutocomplete();\n\n  return (\n    <>\n      <form className=\"search-form\">\n        <button type=\"submit\" className=\"search-button\" tabIndex={-1}>\n          <svg className=\"submit-button\">\n            <use xmlnsXlink=\"http://www.w3.org/1999/xlink\" xlinkHref=\"#search\" />\n          </svg>\n        </button>\n        {\n          loading && (\n            <div className=\"icon-container\">\n              <i className=\"loader\"></i>\n            </div>\n          )\n        }\n        <input\n          value={search}\n          onChange={onSearch}\n          placeholder=\"Search\"\n          aria-label=\"Search\"\n          type=\"text\"\n          className=\"search-input\"\n          autoFocus\n          tabIndex={0}\n        />\n      </form>\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width={0} height={0} display=\"none\">\n        <symbol id=\"search\" viewBox=\"0 0 32 32\">\n          <path d=\"M 19.5 3 C 14.26514 3 10 7.2651394 10 12.5 C 10 14.749977 10.810825 16.807458 12.125 18.4375 L 3.28125 27.28125 L 4.71875 28.71875 L 13.5625 19.875 C 15.192542 21.189175 17.250023 22 19.5 22 C 24.73486 22 29 17.73486 29 12.5 C 29 7.2651394 24.73486 3 19.5 3 z M 19.5 5 C 23.65398 5 27 8.3460198 27 12.5 C 27 16.65398 23.65398 20 19.5 20 C 15.34602 20 12 16.65398 12 12.5 C 12 8.3460198 15.34602 5 19.5 5 z\" />\n        </symbol>\n      </svg>\n    </>\n  )\n}\n\nexport default SearchInput;","// Dependencies\nimport React from 'react';\n\n// Hooks\nimport { useAutocomplete } from '../../hooks/useAutocomplete';\n\n// Stylesz\nimport './styles.css'\n\nexport function Suggestions() {\n  const { suggestions, error } = useAutocomplete();\n\n  if (error) {\n    return <p>There was an error, please try again</p>\n  }\n\n  if (suggestions.length === 0) {\n    return null;\n  }\n\n  return (\n    <div className=\"suggestions\">\n      <ul role=\"tablist\">\n        {suggestions.map((issue) => (\n          <li\n            role=\"tab\"\n            key={issue.id}\n            tabIndex={0}\n          >\n            <a\n              tabIndex={-1}\n              className=\"issue-container\"\n              href={issue.html_url}\n              rel=\"noopener noreferrer\"\n              target=\"_blank\"\n            >\n              <h4>{issue.title}</h4>\n              <div className=\"labels-container\">\n                {\n                  issue.labels.map((label) => <p className=\"issue-label\" key={label.id}>{label.name}</p>)\n                }\n              </div>\n              <p>{`#${issue.number}`}</p>\n            </a>\n          </li>\n        ))}\n      </ul>\n    </div>\n\n  )\n}\n\nexport default Suggestions;","// Dependencies\nimport React from 'react';\n\n// Components\nimport AutocompleteProvider from './components/AutocompleteProvider';\nimport SearchInput from './components/SearchInput';\nimport Suggestions from './components/Suggestions';\n\nexport function App() {\n  return (\n    <AutocompleteProvider>\n      <div className=\"container\">\n        <SearchInput />\n        <Suggestions />\n      </div>\n    </AutocompleteProvider>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}